<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spritePlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize variables
maxSpeedX = 20;
maxSpeedY = 20;
movespeed = 4; // If you change this don't forget to change it in objectCursedTreasure, too
gravspeed = 0.5;
jumpspeed = -10; // If you change this don't forget to change it in objectCursedTreasure, too
ignoreInput = false;
global.runTreasure = 0;
global.runAddedTreasure = false;
treasureModifier = 0.95;
fastTreasureModifier = 1.25;
canDoubleJump = true;
speedX = 0;
speedY = 0;

// Animation
movingImageSpeed = 10 / 60;
standingImage = 2;
jumpingImage = 0;
image_speed = 0;
image_index = standingImage;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Player input and gravity
if (ignoreInput) {
    keyRight = 0;
    keyLeft = 0;
    keyJump = 0;
    keyJumpHold = 0;
    keyTreasure = 0;
} else {
    keyRight = keyboard_check(vk_right);
    keyLeft = -keyboard_check(vk_left);
    keyJump = keyboard_check_pressed(vk_space);
    keyJumpHold = keyboard_check(vk_space);
    keyTreasure = keyboard_check_pressed(vk_shift);
}

if (keyTreasure &amp;&amp; global.runTreasure &gt; 0 &amp;&amp; !global.noDroppingTreasure) {
    global.runTreasure--;
    if (global.fastTreasure) {
        movespeed /= fastTreasureModifier;
        jumpspeed /= fastTreasureModifier;
    } else {
        movespeed /= treasureModifier;
        jumpspeed /= treasureModifier;
    }
}

if (global.leftDisabled) {
    keyLeft = 0;
}

move = keyLeft + keyRight;

speedX = move * movespeed;
speedY += gravspeed;

if (move &lt; 0) {
    image_speed = movingImageSpeed;
    // TODO: Face left
} else if (move &gt; 0) {
    image_speed = movingImageSpeed;
} else {
    image_speed = 0;
    image_index = standingImage;
}

var tileBeneath = place_meeting(x, y + 1, objectTileParent);
if (tileBeneath) {
    canDoubleJump = true;
    if (keyJump) {
        audio_play_sound(soundJump, 0.95, false);
        speedY = keyJump * jumpspeed;
    }
} else if (keyJump &amp;&amp; canDoubleJump &amp;&amp; !global.doubleJumpDisabled) {
    audio_play_sound(soundJump, 0.95, false);
    speedY = keyJump * jumpspeed;
    canDoubleJump = false;
}

if (speedY &lt; 0 &amp;&amp; !keyJumpHold) {
    speedY *= 0.75;
}

// Set jumping animation
if (!tileBeneath) {
    image_speed = 0;
    image_index = jumpingImage;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle collision detection

var resetSpeedX = false;
var resetSpeedY = false;
var signY = sign(speedY);
/*if (signY == 0) {
    signY = 1;
}*/

if (place_meeting(x + speedX, y, objectTileParent)) {
    // Handle colliding with tiles in the X direction
    while (!place_meeting(x + sign(speedX), y, objectTileParent)) {
        x += sign(speedX);
    }
    resetSpeedX = true;
}

if (place_meeting(x, y + speedY, objectTileParent)) {
    // Handle colliding with tiles in the Y direction
//    if (speedY &lt; 0) {
//        // TODO: Add special logic for jumping up into blocks with space to slide around
//        while (!place_meeting(x, y + sign(speedY), objectTileParent)) {
//            y += sign(speedY);
//        }
//    } else {
    while (!place_meeting(x, y + sign(speedY), objectTileParent)) {
        y += sign(speedY);
    }
//    }
    resetSpeedY = true;
}

if (place_meeting(x + sign(speedX), y + signY, objectTileDeath)) {
    // Colliding with death tiles should kill the player
    if (!ignoreInput) {
        scriptKillPlayer();
    }
}

if (resetSpeedX) {
    speedX = 0;
}
if (resetSpeedY) {
    speedY = 0;
}

// Colliding with the goal at the end of the level
if (place_meeting(x + speedX, y, objectGoal) || place_meeting(x, y + speedY, objectGoal)) {
    // TODO: Refine this logic for very fast moving players if necessary
    audio_stop_all();
    room_goto_next();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update x and y position based on speedX and speedY
x += speedX;
y += speedY;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
